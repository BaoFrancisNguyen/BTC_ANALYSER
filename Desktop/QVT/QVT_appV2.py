import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
import os

# === Configuration Streamlit ===
st.title("AmÃ©lioration de la QVT des Alternants avec Belbin")

# === 1. DÃ©finition des 9 Profils Belbin ===
roles = [
    "Propulseur", "RÃ©alisateur", "Perfectionniste",
    "CrÃ©atif", "Ã‰valuateur", "SpÃ©cialiste",
    "Coordinateur", "Soutien", "Chercheur de ressources"
]

# === 2. CrÃ©ation du Questionnaire (20 questions) ===
st.subheader("Questionnaire Belbin (20 Questions)")
st.write("RÃ©pondez aux questions pour dÃ©terminer votre rÃ´le dominant.")

questions = [
    "Jâ€™aime challenger les idÃ©es et pousser mon Ã©quipe Ã  aller plus loin.",
    "Je suis trÃ¨s organisÃ© et je mets en place des processus pour Ãªtre efficace.",
    "Je fais attention aux dÃ©tails et je nâ€™aime pas les erreurs.",
    "Jâ€™ai toujours de nouvelles idÃ©es innovantes.",
    "Jâ€™analyse en profondeur les problÃ¨mes avant de prendre une dÃ©cision.",
    "Je suis passionnÃ© par un domaine et jâ€™aime partager mon expertise.",
    "Jâ€™aime organiser et rÃ©partir le travail au sein de mon Ã©quipe.",
    "Je suis un bon mÃ©diateur et jâ€™Ã©vite les conflits.",
    "Jâ€™aime dÃ©couvrir de nouvelles opportunitÃ©s et crÃ©er des connexions.",
    "Je prends des dÃ©cisions rapidement et jâ€™aime lâ€™action.",
    "Je suis mÃ©thodique et pragmatique.",
    "Je vÃ©rifie toujours mon travail plusieurs fois avant de le soumettre.",
    "Jâ€™aime expÃ©rimenter de nouvelles idÃ©es.",
    "Je suis critique et je prends du recul avant dâ€™agir.",
    "Jâ€™aime approfondir mes connaissances et me spÃ©cialiser.",
    "Je suis diplomate et je valorise lâ€™esprit dâ€™Ã©quipe.",
    "Je motive mon Ã©quipe en donnant une vision claire des objectifs.",
    "Jâ€™aime travailler en groupe et je favorise la cohÃ©sion.",
    "Je suis toujours Ã  la recherche de nouveaux contacts pour mon entreprise.",
    "Jâ€™aime rÃ©soudre les problÃ¨mes complexes."
]

# RÃ©ponses de l'utilisateur
responses = []
for q in questions:
    responses.append(st.slider(q, 0, 10, 5))

# === 3. EntraÃ®nement d'un modÃ¨le K-Means ===
st.subheader("Analyse de votre profil")

np.random.seed(42)
data_train = np.random.randint(0, 11, size=(200, len(questions)))
scaler = StandardScaler()
scaled_data_train = scaler.fit_transform(data_train)

kmeans = KMeans(n_clusters=9, random_state=42, n_init=10)
kmeans.fit(scaled_data_train)

scaled_user_data = scaler.transform(np.array(responses).reshape(1, -1))
predicted_role = kmeans.predict(scaled_user_data)

st.success(f"Votre rÃ´le principal est : **{roles[predicted_role[0]]}**")

# === 4. Suivi et sauvegarde des scores QVT ===
st.subheader("Suivi de votre QVT")

csv_file = "qvt_scores.csv"
current_qvt_score = np.mean(responses) * 10  # Normalisation du score sur 100


if os.path.exists(csv_file):
    df = pd.read_csv(csv_file)
else:
    df = pd.DataFrame(columns=["Semaine", "Score QVT"])

# Ajout d'un bouton pour enregistrer manuellement
if st.button("Sauvegarder mon score QVT"):
    new_entry = pd.DataFrame({"Semaine": [len(df) + 1], "Score QVT": [current_qvt_score]})
    df = pd.concat([df, new_entry], ignore_index=True)
    df.to_csv(csv_file, index=False)
    st.success("Score QVT sauvegardÃ© avec succÃ¨s !")

fig = px.line(df, x="Semaine", y="Score QVT", title="Ã‰volution de la qualitÃ© de vie au travail")
st.plotly_chart(fig)

# === 5. ModÃ¨le prÃ©dictif du QVT ===
st.subheader("PrÃ©diction du futur QVT")

if len(df) > 1:
    model = LinearRegression()
    model.fit(df[["Semaine"]], df["Score QVT"])
    future_week = len(df) + 1
    predicted_qvt = model.predict([[future_week]])[0]
    
    st.write(f"Estimation du Score QVT pour la semaine {future_week} : **{predicted_qvt:.2f}**")

    # === 6. Alerte pour le tuteur ===
    alert_threshold = 60
    if predicted_qvt < alert_threshold:
        st.warning("Alerte ! Le score QVT prÃ©dit est trop bas. Contactez le tuteur pour discuter des amÃ©liorations possibles.")

# === 7. Recommandations personnalisÃ©es ===
st.subheader("Recommandations pour amÃ©liorer votre bien-Ãªtre")

reco_dict = {
    "Propulseur": [" Canalisez votre Ã©nergie pour Ã©viter les conflits.", " Apprenez Ã  Ã©couter les autres avant d'imposer vos idÃ©es."],
    "RÃ©alisateur": [" DÃ©lÃ©guez plus pour Ã©viter la surcharge de travail.", " ExpÃ©rimentez de nouvelles mÃ©thodes de travail."],
    "Perfectionniste": ["Fixez-vous une limite de rÃ©vision pour Ã©viter la paralysie.", " Acceptez que la perfection n'est pas toujours nÃ©cessaire."],
    "CrÃ©atif": ["Travaillez avec des personnes structurÃ©es pour concrÃ©tiser vos idÃ©es.", " Testez vos idÃ©es avant de les imposer."],
    "Ã‰valuateur": [" Ne tombez pas dans l'excÃ¨s d'analyse.", " Faites confiance Ã  votre intuition parfois."],
    "SpÃ©cialiste": [" Travaillez sur votre communication pour mieux partager votre savoir.", " Ã‰vitez de trop vous isoler."],
    "Coordinateur": [" Donnez plus dâ€™autonomie aux autres.", " Ã‰vitez dâ€™Ãªtre trop centrÃ© sur lâ€™organisation."],
    "Soutien": [" Apprenez Ã  dire non pour Ã©viter la surcharge.", " Valorisez aussi vos propres compÃ©tences."],
    "Chercheur de ressources": [" Apprenez Ã  rester focus sur un projet.", " Suivez vos idÃ©es jusquâ€™Ã  leur aboutissement."]
}

st.write("ðŸ”¹ " + "\nðŸ”¹ ".join(reco_dict[roles[predicted_role[0]]]))

